// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`kitchen sink handles a large amount of scale and style props 1`] = `
"import _css from \\"@emotion/css\\";
import { jsx as ___EmotionJSX } from \\"@emotion/core\\";
import { getStyle as __getStyle, getScaleStyle as __getScaleStyle } from \\"babel-plugin-style-props-emotion/runtime\\";

const Example = () => {
  const array = ['l', 'l', 'm', 'm', 'xl'];
  const variable = 'huge';
  return ___EmotionJSX(\\"div\\", {
    css:
    /*#__PURE__*/
    _css({
      display: __getStyle(theme, \\"display\\", 'flex'),
      fontSize: __getStyle(theme, \\"fontSizes\\", '1rem'),
      color: __getStyle(theme, \\"colors\\", 'green'),
      lineHeight: __getStyle(theme, \\"lineHeights\\", 1.5),
      textTransform: __getStyle(theme, \\"textTransform\\", 'uppercase'),
      fontFamily: __getStyle(theme, \\"fonts\\", 'system-ui'),
      maxWidth: __getStyle(theme, \\"sizes\\", variable),
      margin: __getScaleStyle(theme, \\"spaceScales\\", \\"space\\", array, 0),
      paddingTop: __getScaleStyle(theme, \\"spaceScales\\", \\"space\\", 'l', 0),
      paddingBottom: __getScaleStyle(theme, \\"spaceScales\\", \\"space\\", 'l', 0),
      \\"&:hover\\": {
        color: __getStyle(theme, \\"colors\\", 'red')
      },
      \\"&:focus\\": {
        color: __getStyle(theme, \\"colors\\", 'red')
      },
      [theme.mediaQueries[0]]: {
        fontSize: __getStyle(theme, \\"fontSizes\\", '2rem'),
        margin: __getScaleStyle(theme, \\"spaceScales\\", \\"space\\", array, 1),
        paddingTop: __getScaleStyle(theme, \\"spaceScales\\", \\"space\\", 'l', 1),
        paddingBottom: __getScaleStyle(theme, \\"spaceScales\\", \\"space\\", 'l', 1),
        \\"&:focus\\": {
          color: __getStyle(theme, \\"colors\\", 'green')
        }
      },
      [theme.mediaQueries[1]]: {
        margin: __getScaleStyle(theme, \\"spaceScales\\", \\"space\\", array, 2),
        paddingTop: __getScaleStyle(theme, \\"spaceScales\\", \\"space\\", 'xxl', 2),
        paddingBottom: __getScaleStyle(theme, \\"spaceScales\\", \\"space\\", 'xxl', 2),
        \\"&:focus\\": {
          color: __getStyle(theme, \\"colors\\", 'blue')
        }
      },
      [theme.mediaQueries[2]]: {
        fontSize: __getStyle(theme, \\"fontSizes\\", '3rem'),
        margin: __getScaleStyle(theme, \\"spaceScales\\", \\"space\\", array, 3),
        paddingTop: __getScaleStyle(theme, \\"spaceScales\\", \\"space\\", 'xxl', 3),
        paddingBottom: __getScaleStyle(theme, \\"spaceScales\\", \\"space\\", 'xxl', 3)
      },
      [theme.mediaQueries[3]]: {
        margin: __getScaleStyle(theme, \\"spaceScales\\", \\"space\\", array, 4),
        paddingTop: __getScaleStyle(theme, \\"spaceScales\\", \\"space\\", 'xxl', 4),
        paddingBottom: __getScaleStyle(theme, \\"spaceScales\\", \\"space\\", 'xxl', 4)
      }
    }, \\"label:Example;\\")
  });
};"
`;

exports[`modifiers handles modifier props 1`] = `
"import _css from \\"@emotion/css\\";
import { jsx as ___EmotionJSX } from \\"@emotion/core\\";
import { getStyle as __getStyle, getScaleStyle as __getScaleStyle } from \\"babel-plugin-style-props-emotion/runtime\\";

const Example = () => {
  return ___EmotionJSX(\\"div\\", {
    css:
    /*#__PURE__*/
    _css({
      color: __getStyle(theme, \\"colors\\", 'red'),
      \\"&:hover\\": {
        color: __getStyle(theme, \\"colors\\", 'blue')
      },
      \\"&:focus\\": {
        color: __getStyle(theme, \\"colors\\", 'green')
      },
      \\"&:active\\": {
        color: __getStyle(theme, \\"colors\\", 'purple')
      }
    }, \\"label:Example;\\")
  });
};"
`;

exports[`modifiers handles responsive modifier props 1`] = `
"import _css from \\"@emotion/css\\";
import { jsx as ___EmotionJSX } from \\"@emotion/core\\";
import { getStyle as __getStyle, getScaleStyle as __getScaleStyle } from \\"babel-plugin-style-props-emotion/runtime\\";

const Example = () => {
  return ___EmotionJSX(\\"div\\", {
    css:
    /*#__PURE__*/
    _css({
      \\"&:hover\\": {
        color: __getStyle(theme, \\"colors\\", 'red')
      },
      [theme.mediaQueries[1]]: {
        \\"&:hover\\": {
          color: __getStyle(theme, \\"colors\\", 'green')
        }
      }
    }, \\"label:Example;\\")
  });
};"
`;

exports[`modifiers supports merging with an existing __styleProps__ with modifier props 1`] = `
"import _css from \\"@emotion/css\\";
import { jsx as ___EmotionJSX } from \\"@emotion/core\\";
import { getStyle as __getStyle, getScaleStyle as __getScaleStyle } from \\"babel-plugin-style-props-emotion/runtime\\";

const Example = () => {
  const color = 'red';
  return ___EmotionJSX(\\"div\\", {
    css:
    /*#__PURE__*/
    _css({
      color: __getStyle(theme, \\"colors\\", 'red'),
      margin: __getStyle(theme, \\"space\\", '3rem'),
      padding: __getScaleStyle(theme, \\"spaceScales\\", \\"space\\", 'xl', 0),
      \\"&:hover\\": {
        color: __getStyle(theme, \\"colors\\", 'blue'),
        margin: __getStyle(theme, \\"space\\", '4rem')
      },
      \\"&:focus\\": {
        color: __getStyle(theme, \\"colors\\", 'purple'),
        margin: __getStyle(theme, \\"space\\", '5rem')
      },
      \\"&:active\\": {
        color: __getStyle(theme, \\"colors\\", 'green'),
        margin: __getStyle(theme, \\"space\\", '6rem')
      },
      [theme.mediaQueries[0]]: {
        padding: __getScaleStyle(theme, \\"spaceScales\\", \\"space\\", 'xl', 1),
        \\"&:focus\\": {
          margin: __getStyle(theme, \\"space\\", '6rem')
        },
        \\"&:active\\": {
          margin: __getStyle(theme, \\"space\\", '7rem')
        }
      },
      [theme.mediaQueries[1]]: {
        padding: __getScaleStyle(theme, \\"spaceScales\\", \\"space\\", 'xl', 2)
      },
      [theme.mediaQueries[2]]: {
        padding: __getScaleStyle(theme, \\"spaceScales\\", \\"space\\", 'xl', 3),
        \\"&:active\\": {
          margin: __getStyle(theme, \\"space\\", '8rem')
        }
      },
      [theme.mediaQueries[3]]: {
        padding: __getScaleStyle(theme, \\"spaceScales\\", \\"space\\", 'xl', 4)
      }
    }, \\"label:Example;\\")
  });
};"
`;

exports[`modifiers supports variable usage in modifier props 1`] = `
"import _css from \\"@emotion/css\\";
import { jsx as ___EmotionJSX } from \\"@emotion/core\\";
import { getStyle as __getStyle, getScaleStyle as __getScaleStyle } from \\"babel-plugin-style-props-emotion/runtime\\";

const Example = () => {
  const color = 'red';
  return ___EmotionJSX(\\"div\\", {
    css:
    /*#__PURE__*/
    _css({
      \\"&:hover\\": {
        color: __getStyle(theme, \\"colors\\", color)
      },
      [theme.mediaQueries[1]]: {
        \\"&:hover\\": {
          color: __getStyle(theme, \\"colors\\", 'green')
        }
      }
    }, \\"label:Example;\\")
  });
};"
`;

exports[`scale prop parsing handles responsive scale props 1`] = `
"import _css from \\"@emotion/css\\";
import { jsx as ___EmotionJSX } from \\"@emotion/core\\";
import { getStyle as __getStyle, getScaleStyle as __getScaleStyle } from \\"babel-plugin-style-props-emotion/runtime\\";

const Example = () => {
  return ___EmotionJSX(\\"div\\", {
    css:
    /*#__PURE__*/
    _css({
      margin: __getScaleStyle(theme, \\"spaceScales\\", \\"space\\", 'l', 0),
      [theme.mediaQueries[0]]: {
        margin: __getScaleStyle(theme, \\"spaceScales\\", \\"space\\", 'l', 1)
      },
      [theme.mediaQueries[1]]: {
        margin: __getScaleStyle(theme, \\"spaceScales\\", \\"space\\", 'm', 2)
      },
      [theme.mediaQueries[2]]: {
        margin: __getScaleStyle(theme, \\"spaceScales\\", \\"space\\", 'm', 3)
      },
      [theme.mediaQueries[3]]: {
        margin: __getScaleStyle(theme, \\"spaceScales\\", \\"space\\", 'm', 4)
      }
    }, \\"label:Example;\\")
  });
};"
`;

exports[`scale prop parsing handles scale props 1`] = `
"import _css from \\"@emotion/css\\";
import { jsx as ___EmotionJSX } from \\"@emotion/core\\";
import { getStyle as __getStyle, getScaleStyle as __getScaleStyle } from \\"babel-plugin-style-props-emotion/runtime\\";

const Example = () => {
  return ___EmotionJSX(\\"div\\", {
    css:
    /*#__PURE__*/
    _css({
      margin: __getScaleStyle(theme, \\"spaceScales\\", \\"space\\", 'l', 0),
      [theme.mediaQueries[0]]: {
        margin: __getScaleStyle(theme, \\"spaceScales\\", \\"space\\", 'l', 1)
      },
      [theme.mediaQueries[1]]: {
        margin: __getScaleStyle(theme, \\"spaceScales\\", \\"space\\", 'l', 2)
      },
      [theme.mediaQueries[2]]: {
        margin: __getScaleStyle(theme, \\"spaceScales\\", \\"space\\", 'l', 3)
      },
      [theme.mediaQueries[3]]: {
        margin: __getScaleStyle(theme, \\"spaceScales\\", \\"space\\", 'l', 4)
      }
    }, \\"label:Example;\\")
  });
};"
`;

exports[`scale prop parsing handles variable arrays in scale props 1`] = `
"import _css from \\"@emotion/css\\";
import { jsx as ___EmotionJSX } from \\"@emotion/core\\";
import { getStyle as __getStyle, getScaleStyle as __getScaleStyle } from \\"babel-plugin-style-props-emotion/runtime\\";

const Example = () => {
  const array = ['l', 'l', 'm', 'm', 'xl'];
  return ___EmotionJSX(\\"div\\", {
    css:
    /*#__PURE__*/
    _css({
      margin: __getScaleStyle(theme, \\"spaceScales\\", \\"space\\", array, 0),
      [theme.mediaQueries[0]]: {
        margin: __getScaleStyle(theme, \\"spaceScales\\", \\"space\\", array, 1)
      },
      [theme.mediaQueries[1]]: {
        margin: __getScaleStyle(theme, \\"spaceScales\\", \\"space\\", array, 2)
      },
      [theme.mediaQueries[2]]: {
        margin: __getScaleStyle(theme, \\"spaceScales\\", \\"space\\", array, 3)
      },
      [theme.mediaQueries[3]]: {
        margin: __getScaleStyle(theme, \\"spaceScales\\", \\"space\\", array, 4)
      }
    }, \\"label:Example;\\")
  });
};"
`;

exports[`scale prop parsing merges scale props with an existing __styleProps__ prop 1`] = `
"import _css from \\"@emotion/css\\";
import { jsx as ___EmotionJSX } from \\"@emotion/core\\";
import { getStyle as __getStyle, getScaleStyle as __getScaleStyle } from \\"babel-plugin-style-props-emotion/runtime\\";

const Example = () => {
  return ___EmotionJSX(\\"div\\", {
    css:
    /*#__PURE__*/
    _css({
      color: __getStyle(theme, \\"colors\\", 'red'),
      padding: __getScaleStyle(theme, \\"spaceScales\\", \\"space\\", 'xl', 0),
      margin: __getScaleStyle(theme, \\"spaceScales\\", \\"space\\", 'l', 0),
      \\"&:hover\\": {
        color: __getStyle(theme, \\"colors\\", 'blue')
      },
      \\"&:focus\\": {
        color: __getStyle(theme, \\"colors\\", 'purple')
      },
      \\"&:active\\": {
        color: __getStyle(theme, \\"colors\\", 'green')
      },
      [theme.mediaQueries[0]]: {
        padding: __getScaleStyle(theme, \\"spaceScales\\", \\"space\\", 'xl', 1),
        margin: __getScaleStyle(theme, \\"spaceScales\\", \\"space\\", 'l', 1)
      },
      [theme.mediaQueries[1]]: {
        padding: __getScaleStyle(theme, \\"spaceScales\\", \\"space\\", 'xl', 2),
        margin: __getScaleStyle(theme, \\"spaceScales\\", \\"space\\", 'l', 2)
      },
      [theme.mediaQueries[2]]: {
        padding: __getScaleStyle(theme, \\"spaceScales\\", \\"space\\", 'xl', 3),
        margin: __getScaleStyle(theme, \\"spaceScales\\", \\"space\\", 'l', 3)
      },
      [theme.mediaQueries[3]]: {
        padding: __getScaleStyle(theme, \\"spaceScales\\", \\"space\\", 'xl', 4),
        margin: __getScaleStyle(theme, \\"spaceScales\\", \\"space\\", 'l', 4)
      }
    }, \\"label:Example;\\")
  });
};"
`;

exports[`style prop parsing handles expressions in style props 1`] = `
"import _css from \\"@emotion/css\\";
import { jsx as ___EmotionJSX } from \\"@emotion/core\\";
import { getStyle as __getStyle, getScaleStyle as __getScaleStyle } from \\"babel-plugin-style-props-emotion/runtime\\";

const Example = ({
  isTest
}) => {
  return ___EmotionJSX(\\"div\\", {
    css:
    /*#__PURE__*/
    _css({
      margin: __getStyle(theme, \\"space\\", isTest ? '3rem' : '4rem')
    }, \\"label:Example;\\")
  });
};"
`;

exports[`style prop parsing handles responsive style props 1`] = `
"import _css from \\"@emotion/css\\";
import { jsx as ___EmotionJSX } from \\"@emotion/core\\";
import { getStyle as __getStyle, getScaleStyle as __getScaleStyle } from \\"babel-plugin-style-props-emotion/runtime\\";

const Example = () => {
  return ___EmotionJSX(\\"div\\", {
    css:
    /*#__PURE__*/
    _css({
      margin: __getStyle(theme, \\"space\\", '3rem'),
      display: __getStyle(theme, \\"display\\", 'grid'),
      [theme.mediaQueries[0]]: {
        margin: __getStyle(theme, \\"space\\", '4rem'),
        paddingTop: __getStyle(theme, \\"space\\", '4rem')
      },
      [theme.mediaQueries[2]]: {
        paddingTop: __getStyle(theme, \\"space\\", '6rem')
      }
    }, \\"label:Example;\\")
  });
};"
`;

exports[`style prop parsing handles style props 1`] = `
"import _css from \\"@emotion/css\\";
import { jsx as ___EmotionJSX } from \\"@emotion/core\\";
import { getStyle as __getStyle, getScaleStyle as __getScaleStyle } from \\"babel-plugin-style-props-emotion/runtime\\";

const Example = () => {
  return ___EmotionJSX(\\"div\\", {
    css:
    /*#__PURE__*/
    _css({
      margin: __getStyle(theme, \\"space\\", '3rem'),
      lineHeight: __getStyle(theme, \\"lineHeights\\", 1.5)
    }, \\"label:Example;\\")
  });
};"
`;

exports[`style prop parsing handles style props on multiple elements 1`] = `
"import _css from \\"@emotion/css\\";
import { jsx as ___EmotionJSX } from \\"@emotion/core\\";
import { getStyle as __getStyle, getScaleStyle as __getScaleStyle } from \\"babel-plugin-style-props-emotion/runtime\\";

const Example = () => {
  return ___EmotionJSX(\\"div\\", {
    css:
    /*#__PURE__*/
    _css({
      margin: __getStyle(theme, \\"space\\", '1rem')
    }, \\"label:Example;\\")
  }, ___EmotionJSX(\\"span\\", {
    css:
    /*#__PURE__*/
    _css({
      padding: __getStyle(theme, \\"space\\", '2rem')
    }, \\"label:Example;\\")
  }));
};"
`;

exports[`style prop parsing handles variable usage in style props 1`] = `
"import _css from \\"@emotion/css\\";
import { jsx as ___EmotionJSX } from \\"@emotion/core\\";
import { getStyle as __getStyle, getScaleStyle as __getScaleStyle } from \\"babel-plugin-style-props-emotion/runtime\\";

const Example = ({
  size
}) => {
  const variable = '3rem';

  const myFunction = () => '4rem';

  return ___EmotionJSX(\\"div\\", {
    css:
    /*#__PURE__*/
    _css({
      margin: __getStyle(theme, \\"space\\", variable),
      [theme.mediaQueries[0]]: {
        margin: __getStyle(theme, \\"space\\", size)
      },
      [theme.mediaQueries[1]]: {
        margin: __getStyle(theme, \\"space\\", myFunction())
      }
    }, \\"label:Example;\\")
  });
};"
`;

exports[`style prop parsing merges parsed props with an existing __styleProps__ prop 1`] = `
"import _css from \\"@emotion/css\\";
import { jsx as ___EmotionJSX } from \\"@emotion/core\\";
import { getStyle as __getStyle, getScaleStyle as __getScaleStyle } from \\"babel-plugin-style-props-emotion/runtime\\";

const Example = () => {
  return ___EmotionJSX(\\"div\\", {
    css:
    /*#__PURE__*/
    _css({
      color: __getStyle(theme, \\"colors\\", 'red'),
      padding: __getStyle(theme, \\"space\\", '1rem'),
      margin: __getScaleStyle(theme, \\"spaceScales\\", \\"space\\", 'xl', 0),
      \\"&:hover\\": {
        color: __getStyle(theme, \\"colors\\", 'blue')
      },
      \\"&:focus\\": {
        color: __getStyle(theme, \\"colors\\", 'purple')
      },
      \\"&:active\\": {
        color: __getStyle(theme, \\"colors\\", 'green')
      },
      [theme.mediaQueries[0]]: {
        padding: __getStyle(theme, \\"space\\", '2rem'),
        margin: __getScaleStyle(theme, \\"spaceScales\\", \\"space\\", 'xl', 1)
      },
      [theme.mediaQueries[1]]: {
        padding: __getStyle(theme, \\"space\\", '3rem'),
        margin: __getScaleStyle(theme, \\"spaceScales\\", \\"space\\", 'xl', 2)
      },
      [theme.mediaQueries[2]]: {
        padding: __getStyle(theme, \\"space\\", '4rem'),
        margin: __getScaleStyle(theme, \\"spaceScales\\", \\"space\\", 'xl', 3)
      },
      [theme.mediaQueries[3]]: {
        margin: __getScaleStyle(theme, \\"spaceScales\\", \\"space\\", 'xl', 4)
      }
    }, \\"label:Example;\\")
  });
};"
`;
